{"version":3,"sources":["components/header.js","components/card.js","images/calcium.jpg","images/chromium.jpg","images/copper.jpg","images/gold.jpg","images/iridium.jpg","images/iron.jpg","images/lead.jpg","images/magnesium.jpg","images/sodium.jpg","images/potassium.jpg","images/titanium.JPG","images/vanadium.jpg","components/Gameboard.js","App.js","reportWebVitals.js","index.js"],"names":["Header","props","this","score","highScore","className","React","Component","Card","id","metalName","image","handleClick","div","onClick","initial","opacity","scale","animate","whileHover","whileTap","layout","src","alt","Gameboard","randomizeArray","handleScore","increment","setHighScore","state","Metals","metal","clicked","setState","Clicked","forEach","element","randomize","arr","index","length","tempValue","randomValue","Math","floor","random","randomizedArray","Calcium","Chromium","Copper","Gold","Iridium","Iron","Lead","Magnesium","Potassium","Sodium","Titanium","Vanadium","bind","map","Metal","App","incrementScore","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.875f11ac.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./header.css\"\r\n\r\nclass Header extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    const { score, highScore } = this.props.score;\r\n    return(\r\n      <header>\r\n      <h1 className=\"title\">Metallic memory game!</h1>\r\n      <h2 className=\"second-title\">Don't click any metal more than once or you'll loose</h2>\r\n      <p className=\"score\">Your Score: {score}</p>\r\n      <p className=\"high-score\">Your High Score: {highScore}</p>\r\n      </header>\r\n    );\r\n  }\r\n}\r\nexport default Header;\r\n","import React from \"react\";\r\nimport { motion } from \"framer-motion\";\r\nimport \"./card.css\"\r\n\r\nclass Card extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    const { id, metalName, image, handleClick } = this.props;\r\n    return (\r\n      <motion.div\r\n        id={`card${id}`}\r\n        onClick={() => handleClick(id)}\r\n        className=\"card-div\"\r\n        initial={{\r\n          opacity: 0.1,\r\n          scale: 0.1\r\n        }}\r\n        animate={{\r\n          opacity: 1,\r\n          scale: 1\r\n        }}\r\n        whileHover={{\r\n          scale: 1.4\r\n        }}\r\n        whileTap={{\r\n          scale: 0.8\r\n        }}\r\n        layout\r\n      >\r\n        <img src={image} alt=\"\"/>\r\n        <p>{metalName}</p>\r\n      </motion.div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Card;\r\n","export default __webpack_public_path__ + \"static/media/calcium.45a38296.jpg\";","export default __webpack_public_path__ + \"static/media/chromium.5baa4edc.jpg\";","export default __webpack_public_path__ + \"static/media/copper.9b90cd93.jpg\";","export default __webpack_public_path__ + \"static/media/gold.34e1db0e.jpg\";","export default __webpack_public_path__ + \"static/media/iridium.52613197.jpg\";","export default __webpack_public_path__ + \"static/media/iron.ad000515.jpg\";","export default __webpack_public_path__ + \"static/media/lead.b4be2200.jpg\";","export default __webpack_public_path__ + \"static/media/magnesium.89c59f41.jpg\";","export default __webpack_public_path__ + \"static/media/sodium.b6021414.jpg\";","export default __webpack_public_path__ + \"static/media/potassium.a95c7262.jpg\";","export default __webpack_public_path__ + \"static/media/titanium.a815239b.JPG\";","export default __webpack_public_path__ + \"static/media/vanadium.25343687.jpg\";","import React from \"react\";\r\nimport Card from \"./card\";\r\nimport Calcium from \"../images/calcium.jpg\";\r\nimport Chromium from \"../images/chromium.jpg\";\r\nimport Copper from \"../images/copper.jpg\";\r\nimport Gold from \"../images/gold.jpg\";\r\nimport Iridium from \"../images/iridium.jpg\";\r\nimport Iron from \"../images/iron.jpg\";\r\nimport Lead from \"../images/lead.jpg\";\r\nimport Magnesium from \"../images/magnesium.jpg\";\r\nimport Sodium from \"../images/sodium.jpg\";\r\nimport Potassium from \"../images/potassium.jpg\";\r\nimport Titanium from \"../images/titanium.JPG\";\r\nimport Vanadium from \"../images/vanadium.jpg\";\r\nimport \"./gameboard.css\";\r\n\r\nclass Gameboard extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      Metals: [\r\n        {\r\n          \"id\": 1,\r\n          \"metal\": \"Calcium\",\r\n          \"clicked\": false,\r\n          \"image\": Calcium\r\n        },\r\n        {\r\n          \"id\": 2,\r\n          \"metal\": \"Chromium\",\r\n          \"clicked\": false,\r\n          \"image\": Chromium\r\n        },\r\n        {\r\n          \"id\": 3,\r\n          \"metal\": \"Copper\",\r\n          \"clicked\": \"false\",\r\n          \"image\": Copper\r\n        },\r\n        {\r\n          \"id\": 4,\r\n          \"metal\": \"Gold\",\r\n          \"clicked\": false,\r\n          \"image\": Gold\r\n        },\r\n        {\r\n          \"id\": 5,\r\n          \"metal\": \"Iridium\",\r\n          \"clicked\": false,\r\n          \"image\": Iridium\r\n        },\r\n        {\r\n          \"id\": 6,\r\n          \"metal\": \"Iron\",\r\n          \"clicked\": false,\r\n          \"image\": Iron\r\n        },\r\n        {\r\n          \"id\": 7,\r\n          \"metal\": \"Lead\",\r\n          \"clicked\": false,\r\n          \"image\": Lead\r\n        },\r\n        {\r\n          \"id\": 8,\r\n          \"metal\": \"Magnesium\",\r\n          \"clicked\": false,\r\n          \"image\": Magnesium\r\n        },\r\n        {\r\n          \"id\": 9,\r\n          \"metal\": \"Potassium\",\r\n          \"clicked\": false,\r\n          \"image\": Potassium\r\n        },\r\n        {\r\n          \"id\": 10,\r\n          \"metal\": \"Sodium\",\r\n          \"clicked\": false,\r\n          \"image\": Sodium\r\n        },\r\n        {\r\n          \"id\": 11,\r\n          \"metal\": \"Titanium\",\r\n          \"clicked\": false,\r\n          \"image\": Titanium\r\n        },\r\n        {\r\n          \"id\": 12,\r\n          \"metal\": \"Vanadium\",\r\n          \"clicked\": false,\r\n          \"image\": Vanadium\r\n        }\r\n      ],\r\n      Clicked: false\r\n    }\r\n    this.handleClick.bind(this);\r\n  }\r\n\r\n  handleClick = (id) => {\r\n    this.randomizeArray();\r\n    this.handleScore(id);\r\n  }\r\n\r\n  handleScore = (id) => {\r\n    const {score, increment, setHighScore} = this.props\r\n    for (const metal of this.state.Metals) {\r\n      if (id === metal.id && metal.clicked === false) {\r\n        metal.clicked = true;\r\n        this.setState({\r\n          Clicked: false\r\n        })\r\n        increment();\r\n      } else if (id === metal.id && metal.clicked) {\r\n        setHighScore();\r\n        this.setState({\r\n          Clicked: true\r\n        });\r\n        this.state.Metals.forEach(element => element.clicked = false);\r\n\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  randomize = (arr) => {\r\n    let index = arr.length;\r\n    let tempValue = 0;\r\n    let randomValue = 0;\r\n    while (index !== 0) {\r\n      randomValue = Math.floor(Math.random() * index);\r\n      index--;\r\n\r\n      tempValue = arr[index];\r\n      arr[index] = arr[randomValue];\r\n      arr[randomValue] = tempValue;\r\n    }\r\n    return arr;\r\n  }\r\n\r\n  randomizeArray = () => {\r\n    const randomizedArray = this.randomize(this.state.Metals);\r\n    this.setState(\r\n      {\r\n        Metals: randomizedArray\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <main>\r\n        {this.state.Metals.map(Metal => (\r\n          <Card\r\n            key={Metal.id}\r\n            id={Metal.id}\r\n            metalName={Metal.metal}\r\n            image={Metal.image}\r\n            handleClick={this.handleClick}\r\n          />\r\n        ))}\r\n      </main>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Gameboard;\r\n","import './App.css';\r\nimport React from \"react\";\r\nimport Header from \"./components/header\";\r\n\r\nimport Gameboard from \"./components/Gameboard\";\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      score: 0,\r\n      highScore: 0,\r\n    }\r\n    this.incrementScore.bind(this);\r\n    this.setHighScore.bind(this);\r\n  }\r\n\r\n  incrementScore = () => {\r\n    this.setState({\r\n      score: this.state.score + 1\r\n    })\r\n  }\r\n\r\n  setHighScore = () => {\r\n    if (this.state.score > this.state.highScore) {\r\n      this.setState({\r\n        highScore: this.state.score,\r\n      })\r\n    }\r\n    this.setState({\r\n      score: 0\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Header score={this.state} />\r\n        <Gameboard score={this.state} increment={this.incrementScore} setHighScore={this.setHighScore} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}